[
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15235",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15235/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15235/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15235/events",
    "html_url": "https://github.com/facebook/react/issues/15235",
    "id": 426333551,
    "node_id": "MDU6SXNzdWU0MjYzMzM1NTE=",
    "number": 15235,
    "title": "Issue while doing npm install",
    "user": {
      "login": "ritikasib",
      "id": 41186781,
      "node_id": "MDQ6VXNlcjQxMTg2Nzgx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/41186781?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ritikasib",
      "html_url": "https://github.com/ritikasib",
      "followers_url": "https://api.github.com/users/ritikasib/followers",
      "following_url": "https://api.github.com/users/ritikasib/following{/other_user}",
      "gists_url": "https://api.github.com/users/ritikasib/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ritikasib/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ritikasib/subscriptions",
      "organizations_url": "https://api.github.com/users/ritikasib/orgs",
      "repos_url": "https://api.github.com/users/ritikasib/repos",
      "events_url": "https://api.github.com/users/ritikasib/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ritikasib/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-28T07:12:50Z",
    "updated_at": "2019-03-28T07:12:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**bug**\r\n\r\n**What is the current behavior?**\r\n\r\nWhile trying to npm install getting this error:\r\n\r\n: npm install\r\n```npm WARN deprecated nsp@3.2.1: The Node Security Platform service is shutting down 9/30 - https://blog.npmjs.org/post/175511531085/the-node-security-platform-service-is-shutting\r\nnpm WARN deprecated browserslist@2.11.3: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.\r\nnpm WARN deprecated browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist >3.0 config used in other tools.\r\nnpm ERR! code ETARGET\r\nnpm ERR! notarget No matching version found for react-is@^16.8.6\r\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\r\nnpm ERR! notarget a package version that doesn't exist.\r\nnpm ERR! notarget\r\nnpm ERR! notarget It was specified as a dependency of 'react-test-renderer'\r\nnpm ERR! notarget```\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\n**npm install should work without error**\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15234",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15234/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15234/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15234/events",
    "html_url": "https://github.com/facebook/react/pull/15234",
    "id": 426332915,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY1MjExMDE1",
    "number": 15234,
    "title": "Merge has valid function",
    "user": {
      "login": "yukai-w",
      "id": 43565992,
      "node_id": "MDQ6VXNlcjQzNTY1OTky",
      "avatar_url": "https://avatars3.githubusercontent.com/u/43565992?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yukai-w",
      "html_url": "https://github.com/yukai-w",
      "followers_url": "https://api.github.com/users/yukai-w/followers",
      "following_url": "https://api.github.com/users/yukai-w/following{/other_user}",
      "gists_url": "https://api.github.com/users/yukai-w/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yukai-w/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yukai-w/subscriptions",
      "organizations_url": "https://api.github.com/users/yukai-w/orgs",
      "repos_url": "https://api.github.com/users/yukai-w/repos",
      "events_url": "https://api.github.com/users/yukai-w/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yukai-w/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-03-28T07:10:49Z",
    "updated_at": "2019-03-28T07:10:59Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15234",
      "html_url": "https://github.com/facebook/react/pull/15234",
      "diff_url": "https://github.com/facebook/react/pull/15234.diff",
      "patch_url": "https://github.com/facebook/react/pull/15234.patch"
    },
    "body": "merge `hasValidRef` and `hasValidKey` function in `ReactElement.js`\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15233",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15233/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15233/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15233/events",
    "html_url": "https://github.com/facebook/react/issues/15233",
    "id": 426330350,
    "node_id": "MDU6SXNzdWU0MjYzMzAzNTA=",
    "number": 15233,
    "title": "When state is not updated setState callback should not be invoked",
    "user": {
      "login": "tylde",
      "id": 29283107,
      "node_id": "MDQ6VXNlcjI5MjgzMTA3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29283107?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tylde",
      "html_url": "https://github.com/tylde",
      "followers_url": "https://api.github.com/users/tylde/followers",
      "following_url": "https://api.github.com/users/tylde/following{/other_user}",
      "gists_url": "https://api.github.com/users/tylde/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tylde/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tylde/subscriptions",
      "organizations_url": "https://api.github.com/users/tylde/orgs",
      "repos_url": "https://api.github.com/users/tylde/repos",
      "events_url": "https://api.github.com/users/tylde/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tylde/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-28T07:02:39Z",
    "updated_at": "2019-03-28T07:02:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nWhen null is returned in setState updater, callback is invoked.\r\n`\r\nthis.setState((prevState) => null, callback);\r\n`\r\nExample (see console):\r\nhttps://stackblitz.com/edit/set-state-callback\r\n\r\n**What is the expected behavior?**\r\nWhen state is not updated callback should not be invoked.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n^16.0.0\r\n\r\nWhat do you think about it? First of all we can consider callback what invokes after every setState. On the other side we can consider it as callback invoked only after state change. In my opinion second option is more handy because if I want to invoke callback with some job, I usually need to do something when state changed."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15232",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15232/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15232/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15232/events",
    "html_url": "https://github.com/facebook/react/pull/15232",
    "id": 426316336,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY1MTk5MjIy",
    "number": 15232,
    "title": "[WIP] Allow DevTools to toggle Suspense fallbacks",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-03-28T06:12:17Z",
    "updated_at": "2019-03-28T06:22:00Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15232",
      "html_url": "https://github.com/facebook/react/pull/15232",
      "diff_url": "https://github.com/facebook/react/pull/15232.diff",
      "patch_url": "https://github.com/facebook/react/pull/15232.patch"
    },
    "body": "What it says. Not sure if this is sufficient yet. I'll build it out a bit more before we get this in."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15230",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15230/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15230/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15230/events",
    "html_url": "https://github.com/facebook/react/pull/15230",
    "id": 426225041,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY1MTM0ODQ0",
    "number": 15230,
    "title": "Disable JS urls at build level for www",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-27T23:20:36Z",
    "updated_at": "2019-03-27T23:22:13Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15230",
      "html_url": "https://github.com/facebook/react/pull/15230",
      "diff_url": "https://github.com/facebook/react/pull/15230.diff",
      "patch_url": "https://github.com/facebook/react/pull/15230.patch"
    },
    "body": "This will be FB only for now but this will be on by default in open source for the next major.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15226",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15226/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15226/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15226/events",
    "html_url": "https://github.com/facebook/react/pull/15226",
    "id": 426043280,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY0OTkwOTg4",
    "number": 15226,
    "title": "React 16.8.6",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-03-27T15:54:33Z",
    "updated_at": "2019-03-28T07:07:29Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15226",
      "html_url": "https://github.com/facebook/react/pull/15226",
      "diff_url": "https://github.com/facebook/react/pull/15226.diff",
      "patch_url": "https://github.com/facebook/react/pull/15226.patch"
    },
    "body": "## 16.8.6 (March 27, 2019)\r\n\r\n### React DOM\r\n\r\n* Fix an incorrect bailout in `useReducer()`. ([@acdlite](https://github.com/acdlite) in [#15124](https://github.com/facebook/react/pull/15124))\r\n* Fix iframe warnings in Safari DevTools. ([@renanvalentin](https://github.com/renanvalentin) in [#15099](https://github.com/facebook/react/pull/15099))\r\n* Warn if `contextType` is set to `Context.Consumer` instead of `Context`. ([@aweary](https://github.com/aweary) in [#14831](https://github.com/facebook/react/pull/14831))\r\n* Warn if `contextType` is set to invalid values. ([@gaearon](https://github.com/gaearon) in [#15142](https://github.com/facebook/react/pull/15142))\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15225",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15225/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15225/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15225/events",
    "html_url": "https://github.com/facebook/react/issues/15225",
    "id": 426003215,
    "node_id": "MDU6SXNzdWU0MjYwMDMyMTU=",
    "number": 15225,
    "title": "signal higher priority update",
    "user": {
      "login": "dakom",
      "id": 6406986,
      "node_id": "MDQ6VXNlcjY0MDY5ODY=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6406986?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dakom",
      "html_url": "https://github.com/dakom",
      "followers_url": "https://api.github.com/users/dakom/followers",
      "following_url": "https://api.github.com/users/dakom/following{/other_user}",
      "gists_url": "https://api.github.com/users/dakom/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dakom/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dakom/subscriptions",
      "organizations_url": "https://api.github.com/users/dakom/orgs",
      "repos_url": "https://api.github.com/users/dakom/repos",
      "events_url": "https://api.github.com/users/dakom/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dakom/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-27T14:45:58Z",
    "updated_at": "2019-03-27T14:45:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I have some components that are for drag and drop which would ideally be updated as often as requestAnimationFrame ticks\r\n\r\nIs there a way to signal to react and/or react-dom that these renders should be higher priority?\r\n\r\nTheir children create new `transform` properties on the style object... not sure if that's enough of a signal for the parent.\r\n\r\nOf course it's possible that things are just as optimal as they can be - but I'm curious if there's something I can do to provide a hint..."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15223",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15223/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15223/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15223/events",
    "html_url": "https://github.com/facebook/react/issues/15223",
    "id": 425773306,
    "node_id": "MDU6SXNzdWU0MjU3NzMzMDY=",
    "number": 15223,
    "title": "In some cases, maybe we should lie to React about deps of useEffect",
    "user": {
      "login": "aimergenge",
      "id": 13799160,
      "node_id": "MDQ6VXNlcjEzNzk5MTYw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/13799160?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aimergenge",
      "html_url": "https://github.com/aimergenge",
      "followers_url": "https://api.github.com/users/aimergenge/followers",
      "following_url": "https://api.github.com/users/aimergenge/following{/other_user}",
      "gists_url": "https://api.github.com/users/aimergenge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aimergenge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aimergenge/subscriptions",
      "organizations_url": "https://api.github.com/users/aimergenge/orgs",
      "repos_url": "https://api.github.com/users/aimergenge/repos",
      "events_url": "https://api.github.com/users/aimergenge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aimergenge/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-27T05:39:24Z",
    "updated_at": "2019-03-27T05:39:24Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n\r\n**What is the current behavior?**\r\nWe must specify everything used in `useEffect` into the deps array.\r\n\r\n\r\n**To see the special case:**\r\nhttps://codesandbox.io/s/l29rj9n86m\r\n\r\n\r\n**What is the expected behavior?**\r\nI don't know, maybe find a way to avoid lying about the deps, or just make the rule looser(better not). The key is that I want to \"remember\" the state `data` and `newProps.number - data` *only* whenever the prop `number` change.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.8.3\r\nBrower: chrome\r\nNo\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15222",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15222/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15222/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15222/events",
    "html_url": "https://github.com/facebook/react/pull/15222",
    "id": 425769429,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY0NzgzNDM3",
    "number": 15222,
    "title": "Fix React.lazy infinite loop on passing undefined",
    "user": {
      "login": "raunofreiberg",
      "id": 23662329,
      "node_id": "MDQ6VXNlcjIzNjYyMzI5",
      "avatar_url": "https://avatars1.githubusercontent.com/u/23662329?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raunofreiberg",
      "html_url": "https://github.com/raunofreiberg",
      "followers_url": "https://api.github.com/users/raunofreiberg/followers",
      "following_url": "https://api.github.com/users/raunofreiberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/raunofreiberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raunofreiberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raunofreiberg/subscriptions",
      "organizations_url": "https://api.github.com/users/raunofreiberg/orgs",
      "repos_url": "https://api.github.com/users/raunofreiberg/repos",
      "events_url": "https://api.github.com/users/raunofreiberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raunofreiberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-27T05:21:19Z",
    "updated_at": "2019-03-27T05:21:40Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15222",
      "html_url": "https://github.com/facebook/react/pull/15222",
      "diff_url": "https://github.com/facebook/react/pull/15222.diff",
      "patch_url": "https://github.com/facebook/react/pull/15222.patch"
    },
    "body": "Related to #15019 \r\n\r\nThe following code no longer produces a loop.\r\n\r\n```\r\nconst Component = React.lazy(() => Promise.resolve(undefined));\r\n      ReactDOM.render(\r\n        <div>\r\n          <h1>Hello World!</h1>\r\n          <React.Suspense fallback=\"..\">\r\n            <Component />\r\n          </React.Suspense>\r\n        </div>,\r\n        document.getElementById('container')\r\n      );\r\n```\r\n\r\nInstead, an error is shown: (tried on dev.html standalone fixture)\r\n\r\n```\r\nUncaught Invariant Violation: Element type is invalid. Received a promise that resolves to: undefined. Lazy element type must resolve to a class or function.\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15221",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15221/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15221/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15221/events",
    "html_url": "https://github.com/facebook/react/issues/15221",
    "id": 425733192,
    "node_id": "MDU6SXNzdWU0MjU3MzMxOTI=",
    "number": 15221,
    "title": "Hook equivalent for `getSnapshotBeforeUpdate`",
    "user": {
      "login": "brainkim",
      "id": 2996754,
      "node_id": "MDQ6VXNlcjI5OTY3NTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/2996754?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brainkim",
      "html_url": "https://github.com/brainkim",
      "followers_url": "https://api.github.com/users/brainkim/followers",
      "following_url": "https://api.github.com/users/brainkim/following{/other_user}",
      "gists_url": "https://api.github.com/users/brainkim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brainkim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brainkim/subscriptions",
      "organizations_url": "https://api.github.com/users/brainkim/orgs",
      "repos_url": "https://api.github.com/users/brainkim/repos",
      "events_url": "https://api.github.com/users/brainkim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brainkim/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-27T02:29:09Z",
    "updated_at": "2019-03-27T02:29:09Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere is no hook based equivalent for `getSnapshotBeforeUpdate`. The docs state:\r\n> Our goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon getSnapshotBeforeUpdate and componentDidCatch lifecycles yet, but we plan to add them soon.\r\n\r\n**What is the expected behavior?**\r\n\r\nThere is a hook based equivalent for `getSnapshotBeforeUpdate`, maybe something like:\r\n\r\n```js\r\nfunction ScrollingList(props) {\r\n  const lengthRef = React.useRef(0);\r\n  const listRef = React.useRef(null);\r\n  const prevHeight = React.useSnapshot(() => {\r\n    if (lengthRef.current < props.list.length) {\r\n      const list = listRef.current;\r\n      return list.scrollHeight - list.scrollTop;\r\n    }\r\n  }, [props.list.length]);\r\n  React.useEffect(() => {\r\n    if (prevHeight != null) {\r\n      const list = listRef.current;\r\n      list.scrollTop = list.scrollHeight - prevHeight;\r\n    }\r\n    lengthRef.current = props.list.length;\r\n  }, [prevHeight, props.list.length]);\r\n  return (\r\n    <div ref={listRef}>{/* ... */}</div>\r\n  );\r\n}\r\n```\r\n\r\nDunno if this code is the best to use hooks but you get the idea. Basically I just want a hook which runs a function right before an update, and mimicking the `useEffect` pattern of having an array of dependencies.\r\n\r\nI’d like to know:\r\n1. If this feature is planned or on the roadmap.\r\n2. What the proposed API will be.\r\n3. If anyone is working on this.\r\n\r\nSorry, if this is being tracked anywhere. I’m planning an intense component which will have to use `getSnapshotBeforeUpdate` and I’d love some guidance about its future.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16.8.0 and later. All browsers and OSes.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15220",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15220/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15220/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15220/events",
    "html_url": "https://github.com/facebook/react/issues/15220",
    "id": 425714282,
    "node_id": "MDU6SXNzdWU0MjU3MTQyODI=",
    "number": 15220,
    "title": "Сontext via Provider and static contextType.",
    "user": {
      "login": "GTOsss",
      "id": 19191516,
      "node_id": "MDQ6VXNlcjE5MTkxNTE2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/19191516?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GTOsss",
      "html_url": "https://github.com/GTOsss",
      "followers_url": "https://api.github.com/users/GTOsss/followers",
      "following_url": "https://api.github.com/users/GTOsss/following{/other_user}",
      "gists_url": "https://api.github.com/users/GTOsss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GTOsss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GTOsss/subscriptions",
      "organizations_url": "https://api.github.com/users/GTOsss/orgs",
      "repos_url": "https://api.github.com/users/GTOsss/repos",
      "events_url": "https://api.github.com/users/GTOsss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GTOsss/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-27T01:00:46Z",
    "updated_at": "2019-03-27T01:10:27Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "If for Provider we will pass as value a new object or function, everytime when new props passed to component - render function will be called without shouldComponentUpdate\r\n\r\nIf use Consumer instead of static contextType - shoudComponentUpdate will works as expected.\r\n\r\nAlso if we try to use function and object by reference or primitive data type as value for Provider - shoudComponentUpdate will works as expected.\r\n \r\nshouldComponentUpdate not working: (23 line):\r\nhttps://codesandbox.io/s/6w6v78j5kn \r\n \r\nshouldComponentUpdate working: (23 line):\r\nhttps://codesandbox.io/s/0zzzkrry0 \r\n\r\nsouldComponentUpdate working with arrow function like first case but now use Consumer insted static contextType: (23 line and 51-53 lines): \r\nhttps://codesandbox.io/s/y012725j9z\r\n\r\nIt's look like bug."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15219",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15219/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15219/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15219/events",
    "html_url": "https://github.com/facebook/react/issues/15219",
    "id": 425712868,
    "node_id": "MDU6SXNzdWU0MjU3MTI4Njg=",
    "number": 15219,
    "title": "Combination of componentDidCatch and hooks throws \"Should have a queue. This is likely a bug in React.\"",
    "user": {
      "login": "timkendrick",
      "id": 953720,
      "node_id": "MDQ6VXNlcjk1MzcyMA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/953720?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/timkendrick",
      "html_url": "https://github.com/timkendrick",
      "followers_url": "https://api.github.com/users/timkendrick/followers",
      "following_url": "https://api.github.com/users/timkendrick/following{/other_user}",
      "gists_url": "https://api.github.com/users/timkendrick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/timkendrick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/timkendrick/subscriptions",
      "organizations_url": "https://api.github.com/users/timkendrick/orgs",
      "repos_url": "https://api.github.com/users/timkendrick/repos",
      "events_url": "https://api.github.com/users/timkendrick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/timkendrick/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1109410193,
        "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
        "name": "Component: Hooks",
        "color": "c2f27b",
        "default": false
      },
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-03-27T00:53:53Z",
    "updated_at": "2019-03-27T01:13:41Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nIf a component with hooks throws an error in its render function *after* the hooks have been defined, and that render error is caught via a `componentDidCatch` in a parent component, any subsequent components will have their hook order jumbled up on the next render.\r\n\r\nThis results in the app crashing with an **\"Uncaught Invariant Violation: Should have a queue. This is likely a bug in React. Please file an issue.\"** error (or different messages depending on the specific hooks used)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/34mvmoln65\r\n\r\n(once loaded, open the dev tools console and click the 'Trigger re-render' button)\r\n\r\nRelevant source:\r\n\r\n```jsx\r\nfunction App(props) {\r\n  const [, setCounter] = React.useState(0);\r\n  return (\r\n    <div>\r\n      <ErrorHandler>\r\n        <ErrorThrower />\r\n      </ErrorHandler>\r\n      <StatefulComponent />\r\n      <button onClick={() => setCounter(value => value + 1)}>\r\n        Trigger re-render\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ErrorThrower() {\r\n  React.useMemo(() => undefined, []);\r\n  if (true) {\r\n    throw new Error(\"!!!\");\r\n  }\r\n  return <p>[Error component]</p>;\r\n}\r\n\r\nfunction StatefulComponent() {\r\n  React.useState(null);\r\n  return <p>[Stateful component]</p>;\r\n}\r\n\r\nclass ErrorHandler extends React.Component {\r\n  ...\r\n  componentDidCatch(error) {\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe app should not crash, seeing as the `componentDidCatch()` ought to catch the render error and allow the rest of the app to render as normal\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis will presumably affect all versions of React that include the current Hooks implementation (v16.8 onwards)"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15215",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15215/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15215/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15215/events",
    "html_url": "https://github.com/facebook/react/issues/15215",
    "id": 425603422,
    "node_id": "MDU6SXNzdWU0MjU2MDM0MjI=",
    "number": 15215,
    "title": "Responsive images not working as expected in Safari and IE Edge 18+",
    "user": {
      "login": "tomgenoni",
      "id": 1171072,
      "node_id": "MDQ6VXNlcjExNzEwNzI=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1171072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomgenoni",
      "html_url": "https://github.com/tomgenoni",
      "followers_url": "https://api.github.com/users/tomgenoni/followers",
      "following_url": "https://api.github.com/users/tomgenoni/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomgenoni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomgenoni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomgenoni/subscriptions",
      "organizations_url": "https://api.github.com/users/tomgenoni/orgs",
      "repos_url": "https://api.github.com/users/tomgenoni/repos",
      "events_url": "https://api.github.com/users/tomgenoni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomgenoni/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 127893911,
        "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
        "name": "Component: DOM",
        "color": "fef2c0",
        "default": false
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-03-26T19:16:08Z",
    "updated_at": "2019-03-26T20:28:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using responsive images in React, Safari v12.0.3 and IE Edge v18 request and download the image provided in both the `<source>` and the `<img>` fallback.\r\n\r\n```\r\n<picture>\r\n     <source type=\"image/jpeg\" sizes=\"500px\" srcSet=\"2000.jpeg 2000w\" />\r\n     <img alt=\"test case\" sizes=\"500px\" src=\"fallback.jpeg\" />\r\n</picture>\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce**\r\n\r\nLoad the examples below in Safari v12 and inspect the Network > Image tab.\r\n\r\n### HTML (Expected)\r\n![html](https://user-images.githubusercontent.com/1171072/55025787-deb07e80-4fbe-11e9-9a0e-6b9323f07e4a.png)\r\nExample: https://safari-responsive-image-html.netlify.com/\r\nSource: https://github.com/tomgenoni/safari-responsive-image-html\r\n\r\n### React\r\n![react](https://user-images.githubusercontent.com/1171072/55025810-e6702300-4fbe-11e9-8346-80dfb3e86036.png)\r\nExample: https://safari-responsive-image-react.netlify.com/\r\nSource: https://github.com/tomgenoni/safari-responsive-image-react\r\n\r\n**What is the expected behavior?**\r\n\r\n- Safari and Edge should only request and download the image provided in the `<source>`. Safari and Edge work as expected loading the HTML example.\r\n- Chrome 73 and Firefox 66 already work as expected in both the HTML and React examples.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n- The React example uses https://github.com/facebook/create-react-app\r\n\r\n```\r\n\"react\": \"^16.8.5\",\r\n\"react-dom\": \"^16.8.5\",\r\n\"react-scripts\": \"2.1.8\"\r\n```\r\n\r\n- Browsers affected are Safari on macOS and iOS and IE Edge 18, Windows 10. \r\n- I don't know if this worked in previous versions of React.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15211",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15211/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15211/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15211/events",
    "html_url": "https://github.com/facebook/react/pull/15211",
    "id": 425162256,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjY0MzI1MDA4",
    "number": 15211,
    "title": "Ignore update when React and number input isNaN()",
    "user": {
      "login": "nhunzaker",
      "id": 590904,
      "node_id": "MDQ6VXNlcjU5MDkwNA==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/590904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nhunzaker",
      "html_url": "https://github.com/nhunzaker",
      "followers_url": "https://api.github.com/users/nhunzaker/followers",
      "following_url": "https://api.github.com/users/nhunzaker/following{/other_user}",
      "gists_url": "https://api.github.com/users/nhunzaker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nhunzaker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nhunzaker/subscriptions",
      "organizations_url": "https://api.github.com/users/nhunzaker/orgs",
      "repos_url": "https://api.github.com/users/nhunzaker/repos",
      "events_url": "https://api.github.com/users/nhunzaker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nhunzaker/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-03-25T23:38:09Z",
    "updated_at": "2019-03-26T16:05:23Z",
    "closed_at": null,
    "author_association": "COLLABORATOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15211",
      "html_url": "https://github.com/facebook/react/pull/15211",
      "diff_url": "https://github.com/facebook/react/pull/15211.diff",
      "patch_url": "https://github.com/facebook/react/pull/15211.patch"
    },
    "body": "This commit prevents an issue where assigning NaN to an invalid input causes a text wipe that disrupts text entry:\r\n\r\n![nan-input](https://user-images.githubusercontent.com/590904/54960968-2b8f4900-4f1c-11e9-9155-c4da1b9caa3c.gif)\r\n\r\nThis happens if referencing `input.valueAsNumber` directly, or by calling `Number(input.value)` in the onChange callback of an input. This results in a comparison of `NaN` to `\"\"`, which always returns `true`, assigning a blank string to the input and clearing the input's text.\r\n\r\nIt's also worth mentioning that assigning NaN to an input raises this warning:\r\n\r\n![image](https://user-images.githubusercontent.com/590904/54960587-7e680100-4f1a-11e9-9f00-bfb0e202f530.png)\r\n\r\nHowever we still allow the value to fall through and get assigned to the input.\r\n\r\nThis code is pretty gnarly, and I don't love adding more knots, but I believe this addresses https://github.com/facebook/react/issues/11877 and avoids some bad user experience.\r\n\r\n## Test Plan\r\n\r\nTake a look at the number input fixtures and the new fixture at the bottom here:\r\nhttps://react-dom-fixtures-nan-inputs.surge.sh/number-inputs\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15210",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15210/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15210/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15210/events",
    "html_url": "https://github.com/facebook/react/issues/15210",
    "id": 425003749,
    "node_id": "MDU6SXNzdWU0MjUwMDM3NDk=",
    "number": 15210,
    "title": "Using context to pass down mount order to children with concurrent",
    "user": {
      "login": "natew",
      "id": 12100,
      "node_id": "MDQ6VXNlcjEyMTAw",
      "avatar_url": "https://avatars0.githubusercontent.com/u/12100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/natew",
      "html_url": "https://github.com/natew",
      "followers_url": "https://api.github.com/users/natew/followers",
      "following_url": "https://api.github.com/users/natew/following{/other_user}",
      "gists_url": "https://api.github.com/users/natew/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/natew/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/natew/subscriptions",
      "organizations_url": "https://api.github.com/users/natew/orgs",
      "repos_url": "https://api.github.com/users/natew/repos",
      "events_url": "https://api.github.com/users/natew/events{/privacy}",
      "received_events_url": "https://api.github.com/users/natew/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-03-25T16:40:16Z",
    "updated_at": "2019-03-26T23:54:58Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature / use case\r\n\r\n**What is the current behavior?**\r\n\r\nIt seems currently there is no way to get the order of children from the children themselves with context.\r\n\r\n**What is the expected behavior?**\r\n\r\nI've run into this now in three use cases when building a style system: Breadcrumbs, Segmented views, and Text rhythm/spacing.\r\n\r\nExample 1, breadcrumbs. You want to show an arrow on all but the last breadcrumb, but they may be deeply nested:\r\n\r\n```ts\r\nlet BreadcrumbOrder = createContext({ index: -1, total: -1 })\r\n\r\nlet Button = props => {\r\n  let order = useContext(BreadcrumbOrder)\r\n  return <div style={{ borderRight: order.index > total ? '1px solid red' : 'none' }} {...props} />\r\n}\r\n\r\nlet MyView = () => {\r\n  return (\r\n    <BreadcrumbProvider>\r\n      <Button />\r\n      <Button />\r\n      <div><Button /></div>\r\n    </BreadcrumbProvider>\r\n  )\r\n}\r\n```\r\n\r\nWhere MyView should provide the ordering so that the sub-views can access `total` and `index` and properly style.\r\n\r\nThe other use cases are basically identical, but for different patterns. One is for joining together buttons that are in a row in the interface (Segmented), and the other is for collapsing margins when you have text elements in a vertical column.\r\n\r\nReally this ticket encompasses more of a question or request for documentation clarity here. I'm not sure how it is not pre-concurrent, but I'm assuming mount-order will be non-deterministic if not now then shortly. Is there any reference to a pattern that works for this use case?\r\n\r\nNamely: how children can access their mount order / total children. I can do it now useReducer/context, but I've seen it mount in a weird order at least once and think it was due to a suspense type thing, and would be curious a better practice for this."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15208",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15208/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15208/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15208/events",
    "html_url": "https://github.com/facebook/react/issues/15208",
    "id": 424982991,
    "node_id": "MDU6SXNzdWU0MjQ5ODI5OTE=",
    "number": 15208,
    "title": "Memory referenced by component state is not released when unmounted",
    "user": {
      "login": "syranide",
      "id": 1714255,
      "node_id": "MDQ6VXNlcjE3MTQyNTU=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/1714255?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/syranide",
      "html_url": "https://github.com/syranide",
      "followers_url": "https://api.github.com/users/syranide/followers",
      "following_url": "https://api.github.com/users/syranide/following{/other_user}",
      "gists_url": "https://api.github.com/users/syranide/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/syranide/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/syranide/subscriptions",
      "organizations_url": "https://api.github.com/users/syranide/orgs",
      "repos_url": "https://api.github.com/users/syranide/repos",
      "events_url": "https://api.github.com/users/syranide/events{/privacy}",
      "received_events_url": "https://api.github.com/users/syranide/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-03-25T15:58:42Z",
    "updated_at": "2019-03-26T19:52:36Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nhttps://jsfiddle.net/z5ejtay2/ (**EDIT:** Updated with a better fiddle.)\r\n\r\nUse Chrome, open fiddle, click on the date-output a few times so that it refreshes. Each creates a new XTest-object. Use the developer-memory tab in Chrome and record a new Heap Snapshot (for fiddle.jshell.net). If you search for XTest in the snapshot you'll see 3 or so instances.\r\n\r\nUncomment the componentWillUnmount-line and retry the same again. There will only be a single XTest allocation as expected.\r\n\r\nSo it seems that references to dead component instances are being retained by React, not forever, but for longer than they should. In my own more realistically complicated app it's not as apparent that they are being released at all, it's just continually increasing and they are never being released.\r\n\r\nPS. This is currently a significant (but workaround-able) problem for me, because I'm instancing a memory-heavy editor which is currently causing memory to continually increase.\r\n\r\n**What is the expected behavior?**\r\nImmediately release references so that memory can be reclaimed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.4"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15207",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15207/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15207/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15207/events",
    "html_url": "https://github.com/facebook/react/issues/15207",
    "id": 424982212,
    "node_id": "MDU6SXNzdWU0MjQ5ODIyMTI=",
    "number": 15207,
    "title": "Memoized components should forward displayName",
    "user": {
      "login": "pbondoer",
      "id": 1671753,
      "node_id": "MDQ6VXNlcjE2NzE3NTM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/1671753?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pbondoer",
      "html_url": "https://github.com/pbondoer",
      "followers_url": "https://api.github.com/users/pbondoer/followers",
      "following_url": "https://api.github.com/users/pbondoer/following{/other_user}",
      "gists_url": "https://api.github.com/users/pbondoer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pbondoer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pbondoer/subscriptions",
      "organizations_url": "https://api.github.com/users/pbondoer/orgs",
      "repos_url": "https://api.github.com/users/pbondoer/repos",
      "events_url": "https://api.github.com/users/pbondoer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pbondoer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 204945357,
        "node_id": "MDU6TGFiZWwyMDQ5NDUzNTc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Shallow%20Renderer",
        "name": "Component: Shallow Renderer",
        "color": "eb6420",
        "default": false
      },
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-03-25T15:57:20Z",
    "updated_at": "2019-03-26T19:50:54Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI'd like to report a bug.\r\n\r\n**What is the current behavior?**\r\n\r\nFirst of all, thanks for the great work on fixing https://github.com/facebook/react/issues/14807. However there is still an issue with the current implementation.\r\n\r\n`React.memo` does not forward displayName for tests. In snapshots, components display as `<Component />` and string assertions such as `.find('MyMemoizedComponent')` won't work.\r\n\r\n**What is the expected behavior?**\r\n\r\n`React.memo` should forward displayName for the test renderer.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* React 16.8.5\r\n* Jest 24.5.0\r\n* enzyme 3.9.0\r\n* enzyme-adapter-react-16 1.11.2\r\n\r\n---\r\n\r\nN.B. - Potentially related to https://github.com/facebook/react/issues/14319, but this is related to the more recent changes to support `memo` in the test renderer. Please close if needed, I'm quite new here!\r\n\r\nI'd be happy to submit a PR if the issue is not too complex to look into :smile: "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15204",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15204/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15204/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15204/events",
    "html_url": "https://github.com/facebook/react/issues/15204",
    "id": 424679429,
    "node_id": "MDU6SXNzdWU0MjQ2Nzk0Mjk=",
    "number": 15204,
    "title": "[react-hooks/exhaustive-deps] False positive firing",
    "user": {
      "login": "EugeneDraitsev",
      "id": 16540432,
      "node_id": "MDQ6VXNlcjE2NTQwNDMy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16540432?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EugeneDraitsev",
      "html_url": "https://github.com/EugeneDraitsev",
      "followers_url": "https://api.github.com/users/EugeneDraitsev/followers",
      "following_url": "https://api.github.com/users/EugeneDraitsev/following{/other_user}",
      "gists_url": "https://api.github.com/users/EugeneDraitsev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EugeneDraitsev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EugeneDraitsev/subscriptions",
      "organizations_url": "https://api.github.com/users/EugeneDraitsev/orgs",
      "repos_url": "https://api.github.com/users/EugeneDraitsev/repos",
      "events_url": "https://api.github.com/users/EugeneDraitsev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EugeneDraitsev/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-03-25T00:20:38Z",
    "updated_at": "2019-03-26T22:09:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI want to report a bug\r\n\r\n**What is the current behavior?**\r\n\r\neslint --fix trying to break my hook)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nI have a very simple hook:\r\n```jsx\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport function useSwitchTab(trigger, tabsAmount, initialState = 0) {\r\n  const [currentTab, setTab] = useState(initialState - 1)\r\n\r\n  useEffect(() => {\r\n    setTab(currentTab + 1 >= tabsAmount ? 0 : currentTab + 1)\r\n  }, [tabsAmount, trigger])\r\n\r\n  return [currentTab, setTab]\r\n}\r\n```\r\nIf props `tabsAmount` or `trigger` will change, I need to increase `currentTab` value by 1. It works fine and looks ok for me, but in `eslint-plugin-react-hook` rule `react-hooks/exhaustive-deps` will warn here:\r\n\r\n> React Hook useEffect has a missing dependency: 'currentTab'. Either include it or remove the dependency array. You can also do a functional update 'setTab(c => ...)' if you only need 'c\r\n> urrentTab' in the 'setTab' call  react-hooks/exhaustive-deps\r\n\r\nAnd eslint --fix will break my code like this:\r\n\r\n```jsx\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport function useSwitchTab(trigger, tabsAmount, initialState = 0) {\r\n  const [currentTab, setTab] = useState(initialState - 1)\r\n\r\n  useEffect(() => {\r\n    setTab(currentTab + 1 >= tabsAmount ? 0 : currentTab + 1)\r\n  }, [currentTab, tabsAmount, trigger])\r\n\r\n  return [currentTab, setTab]\r\n}\r\n```\r\nIt will add `currentTab` in deps for useEffect and this will create **endless loop**. \r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nEslint shouldn't fix this warning with --fix option, It may break the code.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact: 16.8.5\r\neslint-plugin-react-hooks: 1.6.0"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15198",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15198/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15198/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15198/events",
    "html_url": "https://github.com/facebook/react/pull/15198",
    "id": 424481182,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjYzODIwODM3",
    "number": 15198,
    "title": "Do not keep bailouted actions which might lead to reducer computing wrong value on update later",
    "user": {
      "login": "Andarist",
      "id": 9800850,
      "node_id": "MDQ6VXNlcjk4MDA4NTA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/9800850?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Andarist",
      "html_url": "https://github.com/Andarist",
      "followers_url": "https://api.github.com/users/Andarist/followers",
      "following_url": "https://api.github.com/users/Andarist/following{/other_user}",
      "gists_url": "https://api.github.com/users/Andarist/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Andarist/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Andarist/subscriptions",
      "organizations_url": "https://api.github.com/users/Andarist/orgs",
      "repos_url": "https://api.github.com/users/Andarist/repos",
      "events_url": "https://api.github.com/users/Andarist/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Andarist/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-03-23T09:17:40Z",
    "updated_at": "2019-03-24T10:23:36Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15198",
      "html_url": "https://github.com/facebook/react/pull/15198",
      "diff_url": "https://github.com/facebook/react/pull/15198.diff",
      "patch_url": "https://github.com/facebook/react/pull/15198.patch"
    },
    "body": "This is a fix for what I think is a bug which I've reported in https://github.com/facebook/react/issues/15088\r\n\r\nThe issue might be observed here https://codesandbox.io/s/n97q1o6nq4 . Just increment the counter -> disable the whole thing -> increment few times (those are going to bail out) -> enable the counter -> observe a counter incrementing by the amount of actions which have bailouted previously.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15197",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15197/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15197/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15197/events",
    "html_url": "https://github.com/facebook/react/pull/15197",
    "id": 424402057,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjYzNzY0MzAx",
    "number": 15197,
    "title": "Added invariant for null/undefined create in useEffect, useLayoutEffect",
    "user": {
      "login": "JoshuaKGoldberg",
      "id": 3335181,
      "node_id": "MDQ6VXNlcjMzMzUxODE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3335181?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoshuaKGoldberg",
      "html_url": "https://github.com/JoshuaKGoldberg",
      "followers_url": "https://api.github.com/users/JoshuaKGoldberg/followers",
      "following_url": "https://api.github.com/users/JoshuaKGoldberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoshuaKGoldberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoshuaKGoldberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoshuaKGoldberg/subscriptions",
      "organizations_url": "https://api.github.com/users/JoshuaKGoldberg/orgs",
      "repos_url": "https://api.github.com/users/JoshuaKGoldberg/repos",
      "events_url": "https://api.github.com/users/JoshuaKGoldberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoshuaKGoldberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 8,
    "created_at": "2019-03-22T21:13:37Z",
    "updated_at": "2019-03-26T11:11:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15197",
      "html_url": "https://github.com/facebook/react/pull/15197",
      "diff_url": "https://github.com/facebook/react/pull/15197.diff",
      "patch_url": "https://github.com/facebook/react/pull/15197.patch"
    },
    "body": "I considered putting this somewhere closer to where `create` is used, but also wanted the complaint to be specific to the function & parameter name...\r\n\r\nFixes #15194.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15196",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15196/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15196/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15196/events",
    "html_url": "https://github.com/facebook/react/pull/15196",
    "id": 424382477,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjYzNzQ4NTg0",
    "number": 15196,
    "title": "Switch to new ReactFiberScheduler implementation",
    "user": {
      "login": "acdlite",
      "id": 3624098,
      "node_id": "MDQ6VXNlcjM2MjQwOTg=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/acdlite",
      "html_url": "https://github.com/acdlite",
      "followers_url": "https://api.github.com/users/acdlite/followers",
      "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
      "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
      "organizations_url": "https://api.github.com/users/acdlite/orgs",
      "repos_url": "https://api.github.com/users/acdlite/repos",
      "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
      "received_events_url": "https://api.github.com/users/acdlite/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-22T20:14:43Z",
    "updated_at": "2019-03-27T20:52:17Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15196",
      "html_url": "https://github.com/facebook/react/pull/15196",
      "diff_url": "https://github.com/facebook/react/pull/15196.diff",
      "patch_url": "https://github.com/facebook/react/pull/15196.patch"
    },
    "body": "## Based on https://github.com/facebook/react/pull/15151\r\n\r\nSets the `enableNewScheduler` feature flag to true.\r\n\r\n`yarn test` now runs against the new implementation, so use `yarn test-old-scheduler` to test the old implementation. Both commands will run in CI, in case we need to revert."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15195",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15195/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15195/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15195/events",
    "html_url": "https://github.com/facebook/react/pull/15195",
    "id": 424352951,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjYzNzI1NTIw",
    "number": 15195,
    "title": "Fix a crash in Suspense with findDOMNode",
    "user": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-03-22T18:49:55Z",
    "updated_at": "2019-03-22T23:50:00Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15195",
      "html_url": "https://github.com/facebook/react/pull/15195",
      "diff_url": "https://github.com/facebook/react/pull/15195.diff",
      "patch_url": "https://github.com/facebook/react/pull/15195.patch"
    },
    "body": "Another attempt at https://github.com/facebook/react/pull/14198.\r\nFixes the internal crash we've recently observed.\r\n\r\nI know this fix might have weird semantics (which DOM node should it return for a suspended tree?) but it still seems better to not crash in this case IMO."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15194",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15194/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15194/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15194/events",
    "html_url": "https://github.com/facebook/react/issues/15194",
    "id": 424262965,
    "node_id": "MDU6SXNzdWU0MjQyNjI5NjU=",
    "number": 15194,
    "title": "Better error message when useEffect is called with no parameters",
    "user": {
      "login": "JoshuaKGoldberg",
      "id": 3335181,
      "node_id": "MDQ6VXNlcjMzMzUxODE=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/3335181?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JoshuaKGoldberg",
      "html_url": "https://github.com/JoshuaKGoldberg",
      "followers_url": "https://api.github.com/users/JoshuaKGoldberg/followers",
      "following_url": "https://api.github.com/users/JoshuaKGoldberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/JoshuaKGoldberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JoshuaKGoldberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JoshuaKGoldberg/subscriptions",
      "organizations_url": "https://api.github.com/users/JoshuaKGoldberg/orgs",
      "repos_url": "https://api.github.com/users/JoshuaKGoldberg/repos",
      "events_url": "https://api.github.com/users/JoshuaKGoldberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JoshuaKGoldberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929153,
        "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
        "name": "Type: Enhancement",
        "color": "84b6eb",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2019-03-22T15:21:19Z",
    "updated_at": "2019-03-22T20:07:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nSuppose you give an `undefined` object or forget to provide parameters to `useEffect`:\r\n\r\n```js\r\nconst App = () => {\r\n    React.useEffect();\r\n    return \"\";\r\n};\r\n\r\nReactDOM.render(<App />, document.getElementById('container'));\r\n```\r\n\r\nOn JSFiddle (https://jsfiddle.net/g39javzq), this error stack is logged:\r\n\r\n```\r\nUncaught TypeError: create is not a function\r\n    at commitHookEffectList (react-dom.development.js:17372)\r\n    at commitPassiveHookEffects (react-dom.development.js:17396)\r\n    at HTMLUnknownElement.callCallback (react-dom.development.js:143)\r\n    at Object.invokeGuardedCallbackDev (react-dom.development.js:193)\r\n    at invokeGuardedCallback (react-dom.development.js:250)\r\n    at commitPassiveEffects (react-dom.development.js:18863)\r\n    at wrapped (react.development.js:1353)\r\n    at flushFirstCallback (react.development.js:587)\r\n    at flushWork (react.development.js:699)\r\n    at MessagePort.channel.port1.onmessage (react.development.js:1093)\r\n```\r\n\r\n...though on a local project in React 16.8.4, this stack is logged:\r\n\r\n```\r\nUncaught TypeError: undefined is not iterable (cannot read property Symbol(Symbol.iterator))\r\n    at _iterableToArrayLimit (my-project.chunk.js:123)\r\n    at _slicedToArray (my-project.chunk.js:456)\r\n    at MyComponent (myFile.js:7)\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nNeither of these were useful during the 5 minutes it took to find the culprit `useEffect` that should have been a `useState`.\r\n\r\nIn development, we check for an `undefined` `deps` argument in `useEffect` and give a better warning?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.4, Chrome on Mac.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15188",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15188/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15188/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15188/events",
    "html_url": "https://github.com/facebook/react/issues/15188",
    "id": 424082507,
    "node_id": "MDU6SXNzdWU0MjQwODI1MDc=",
    "number": 15188,
    "title": "useEffect can very quickly consume free quotas or cost money when used with 3rd party services",
    "user": {
      "login": "PutziSan",
      "id": 13392042,
      "node_id": "MDQ6VXNlcjEzMzkyMDQy",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13392042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PutziSan",
      "html_url": "https://github.com/PutziSan",
      "followers_url": "https://api.github.com/users/PutziSan/followers",
      "following_url": "https://api.github.com/users/PutziSan/following{/other_user}",
      "gists_url": "https://api.github.com/users/PutziSan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PutziSan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PutziSan/subscriptions",
      "organizations_url": "https://api.github.com/users/PutziSan/orgs",
      "repos_url": "https://api.github.com/users/PutziSan/repos",
      "events_url": "https://api.github.com/users/PutziSan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PutziSan/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 6,
    "created_at": "2019-03-22T07:40:58Z",
    "updated_at": "2019-03-23T16:00:25Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature / Documentation-Request\r\n\r\n**What is the current behavior?**\r\nWhen I developed my app last week with useEffect and firebase firestore, it happened to me that my effect used up the 20k-write limit within about 20 seconds. Of course this was a bug introduced by myself, but if I had been in a pay-as-you-go plan it could have cost me some money. I now use a custom hook as useEffect, which counts in development whether a hook is executed too often in 500ms and if so, it throws an error.\r\n\r\n**What is the expected behavior?**\r\nI'm not sure how you could solve this on your side. Of course you could do the check in development-mode, but that would probably trigger existing projects too much. However, a small hint in the documentation would be good that you should take care during development that useEffect can quickly lead to this behavior and that you should be careful when using other 3rd-party services that have a quota or have to be paid.\r\n\r\nI just wanted to share my experiences while developing a \"real\" app. If you can't or won't do anything here, you are welcome to close the issue."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15187",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15187/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15187/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15187/events",
    "html_url": "https://github.com/facebook/react/issues/15187",
    "id": 423987986,
    "node_id": "MDU6SXNzdWU0MjM5ODc5ODY=",
    "number": 15187,
    "title": "Edge 18 & IE 11 server mismatch with SVG icons",
    "user": {
      "login": "oliviertassinari",
      "id": 3165635,
      "node_id": "MDQ6VXNlcjMxNjU2MzU=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/3165635?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/oliviertassinari",
      "html_url": "https://github.com/oliviertassinari",
      "followers_url": "https://api.github.com/users/oliviertassinari/followers",
      "following_url": "https://api.github.com/users/oliviertassinari/following{/other_user}",
      "gists_url": "https://api.github.com/users/oliviertassinari/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/oliviertassinari/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/oliviertassinari/subscriptions",
      "organizations_url": "https://api.github.com/users/oliviertassinari/orgs",
      "repos_url": "https://api.github.com/users/oliviertassinari/repos",
      "events_url": "https://api.github.com/users/oliviertassinari/events{/privacy}",
      "received_events_url": "https://api.github.com/users/oliviertassinari/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710332294,
        "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
        "name": "Component: Server Rendering",
        "color": "d4c5f9",
        "default": false
      },
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-03-21T23:43:04Z",
    "updated_at": "2019-03-22T13:55:36Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nReact raises a warning:\r\n\r\n![Capture d’écran 2019-03-22 à 00 40 00](https://user-images.githubusercontent.com/3165635/54791630-0c05d100-4c3b-11e9-8426-4ea1ebb6e3f4.png)\r\n\r\nhttps://codesandbox.io/s/k91nr3xzy5\r\n\r\n```jsx\r\nimport React from \"react\";\r\n\r\nexport default () => (\r\n  <div>\r\n    2\r\n    <svg>\r\n      <path d=\"M0 0h24v24H0z\" />\r\n    </svg>\r\n  </div>\r\n);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nNo warning\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact: 16.8.4\r\nBrowser: Edge 18"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15182",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15182/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15182/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15182/events",
    "html_url": "https://github.com/facebook/react/issues/15182",
    "id": 423870038,
    "node_id": "MDU6SXNzdWU0MjM4NzAwMzg=",
    "number": 15182,
    "title": "useContext seems to sometimes not grab proximate provider",
    "user": {
      "login": "nagey",
      "id": 13761,
      "node_id": "MDQ6VXNlcjEzNzYx",
      "avatar_url": "https://avatars1.githubusercontent.com/u/13761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nagey",
      "html_url": "https://github.com/nagey",
      "followers_url": "https://api.github.com/users/nagey/followers",
      "following_url": "https://api.github.com/users/nagey/following{/other_user}",
      "gists_url": "https://api.github.com/users/nagey/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nagey/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nagey/subscriptions",
      "organizations_url": "https://api.github.com/users/nagey/orgs",
      "repos_url": "https://api.github.com/users/nagey/repos",
      "events_url": "https://api.github.com/users/nagey/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nagey/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2019-03-21T18:05:32Z",
    "updated_at": "2019-03-21T23:47:39Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nA rerender (after say, interacting with form element) seems to make useContext grab the wrong context. This behavior seems to have been introduced in the space between 16.8.0-alpha.1, and 16.8.0.\r\n\r\n**Steps to reproduce:**\r\nIn the following codesandbox, modify the \"address\" field, and watch react complain about the component going from uncontrolled to controlled — https://codesandbox.io/s/o72wo7ypvq\r\nThen try the same thing here: https://codesandbox.io/s/8k8pyjrol0 and notice no error. There are two instances of useContext nested within two providers. The error is triggered by an update to a form field within the innermost context instead getting the outer context \r\n\r\n**What is the expected behavior?**\r\nas shown here: https://codesandbox.io/s/8k8pyjrol0 — we're keeping the inner context as expected\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nYes. this worked in 16.8.0-alpha.1 (also worked in the 16.7 alphas), but does not work in 16.8.0 through 16.8.4 (I tested each version individually)"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15176",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15176/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15176/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15176/events",
    "html_url": "https://github.com/facebook/react/issues/15176",
    "id": 423641735,
    "node_id": "MDU6SXNzdWU0MjM2NDE3MzU=",
    "number": 15176,
    "title": "React callback ref cleanup function",
    "user": {
      "login": "k15a",
      "id": 20357450,
      "node_id": "MDQ6VXNlcjIwMzU3NDUw",
      "avatar_url": "https://avatars2.githubusercontent.com/u/20357450?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/k15a",
      "html_url": "https://github.com/k15a",
      "followers_url": "https://api.github.com/users/k15a/followers",
      "following_url": "https://api.github.com/users/k15a/following{/other_user}",
      "gists_url": "https://api.github.com/users/k15a/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/k15a/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/k15a/subscriptions",
      "organizations_url": "https://api.github.com/users/k15a/orgs",
      "repos_url": "https://api.github.com/users/k15a/repos",
      "events_url": "https://api.github.com/users/k15a/events{/privacy}",
      "received_events_url": "https://api.github.com/users/k15a/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710375792,
        "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
        "name": "Type: Discussion",
        "color": "fef2c0",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2019-03-21T09:44:36Z",
    "updated_at": "2019-03-21T13:44:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "At the time React added callback refs the main use case for them was to replace string refs. A lot of the callback refs looked like this:\r\n\r\n```jsx\r\n<div ref={node => this.node = node} />\r\n```\r\n\r\nWith the introduction of `createRef` and `useRef` this use case is pretty much replaced by these alternatives so the use case of callback refs will shift to advanced use cases like [measuring DOM nodes](https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node).\r\n\r\nIt would be nice if you could return a cleanup function from the callback ref which is called instead of the callback with null. This way it will behave more like the `useEffect` API.\r\n\r\n```jsx\r\n<div ref={node => {\r\n  // Normal ref callback\r\n\r\n  return () => {\r\n    // Cleanup function which is called when the ref is removed\r\n  }\r\n}} />\r\n```\r\n\r\nThis will be super helpful when you need to set up a Resize-, Intersection- or  MutationObserver.\r\n\r\n```jsx\r\nfunction useDimensions() {\r\n  const [entry, setEntry] = useState()\r\n  \r\n  const targetRef = useCallback((node) => {\r\n    const observer = new ResizeObserver(([entry]) => {\r\n      setEntry(entry)\r\n    })\r\n\r\n    observer.observe(node)\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n  }, [])\r\n\r\n  return [entry, targetRef]\r\n}\r\n\r\nfunction Comp() {\r\n  const [dimensions, targetRef] = useDimensions()\r\n\r\n  return (\r\n    <pre ref={targetRef}>\r\n      {JSON.stringify(dimensions, null, 2)}\r\n    </pre>\r\n  )\r\n}\r\n```\r\n\r\nCurrently, if you want to implement something like this you need to save the observer into a ref and then if the callback ref is called with null you have to clean up the observer from the ref.\r\n\r\nTo be 99% backward compatible we could call both the callback ref with null and the cleanup function. The only case where it isn't backward compatible is if currently someone is returning a function and doesn't expect the function to be called.\r\n\r\n```jsx\r\nfunction ref(node) {\r\n  if (node === null) {\r\n    return\r\n  }\r\n\r\n  // Do something\r\n\r\n  return () => {\r\n    // Cleanup something\r\n  }\r\n}\r\n```"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15175",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15175/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15175/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15175/events",
    "html_url": "https://github.com/facebook/react/issues/15175",
    "id": 423567338,
    "node_id": "MDU6SXNzdWU0MjM1NjczMzg=",
    "number": 15175,
    "title": "[eslint-plugin-react-hooks] Add option to require functions from core hooks in dependencies",
    "user": {
      "login": "decafdennis",
      "id": 93109,
      "node_id": "MDQ6VXNlcjkzMTA5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/93109?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/decafdennis",
      "html_url": "https://github.com/decafdennis",
      "followers_url": "https://api.github.com/users/decafdennis/followers",
      "following_url": "https://api.github.com/users/decafdennis/following{/other_user}",
      "gists_url": "https://api.github.com/users/decafdennis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/decafdennis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/decafdennis/subscriptions",
      "organizations_url": "https://api.github.com/users/decafdennis/orgs",
      "repos_url": "https://api.github.com/users/decafdennis/repos",
      "events_url": "https://api.github.com/users/decafdennis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/decafdennis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-03-21T04:21:58Z",
    "updated_at": "2019-03-21T18:10:47Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the current behavior?**\r\n\r\nThe `react-hooks/exhaustive-deps` will currently accept either (and fix neither) of the following:\r\n\r\n```javascript\r\n// Scenario A: Function returned by core hook IS NOT specified as a dependency.\r\nconst [value, setValue] = useState(initialValue);\r\nconst toggle = useCallback(() => setValue(v => !v), []);\r\n```\r\n\r\n```javascript\r\n// Scenario B: Function returned by core hook IS specified as a dependency.\r\nconst [value, setValue] = useState(initialValue);\r\nconst toggle = useCallback(() => setValue(v => !v), [setValue]);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nIf we add the following to our `.eslintrc.js`\r\n\r\n```\r\n// Introduces a `requireCoreFunctions` config option.\r\n'react-hooks/exhaustive-deps': ['error', { requireCoreFunctions: true }]\r\n```\r\nthen the rule should fail in scenario A, and fixing should result in scenario B.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nn/a"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15173",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15173/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15173/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15173/events",
    "html_url": "https://github.com/facebook/react/pull/15173",
    "id": 423481830,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjYzMDQ1NDY0",
    "number": 15173,
    "title": "Performance improvement: ReactDOMServer `resolve` class method",
    "user": {
      "login": "overlookmotel",
      "id": 557937,
      "node_id": "MDQ6VXNlcjU1NzkzNw==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/557937?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/overlookmotel",
      "html_url": "https://github.com/overlookmotel",
      "followers_url": "https://api.github.com/users/overlookmotel/followers",
      "following_url": "https://api.github.com/users/overlookmotel/following{/other_user}",
      "gists_url": "https://api.github.com/users/overlookmotel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/overlookmotel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/overlookmotel/subscriptions",
      "organizations_url": "https://api.github.com/users/overlookmotel/orgs",
      "repos_url": "https://api.github.com/users/overlookmotel/repos",
      "events_url": "https://api.github.com/users/overlookmotel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/overlookmotel/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2019-03-20T21:31:06Z",
    "updated_at": "2019-03-21T16:26:41Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/15173",
      "html_url": "https://github.com/facebook/react/pull/15173",
      "diff_url": "https://github.com/facebook/react/pull/15173.diff",
      "patch_url": "https://github.com/facebook/react/pull/15173.patch"
    },
    "body": "At present the server-side renderer has a hot path through a function called `resolve()` which contains a lengthy closure `processChild()`.\r\n\r\nThis PR converts `resolve()` and `processChild()` to prototype methods of `ReactDOMServerRenderer` class, to remove this closure.\r\n\r\nUsing a [fairly naive benchmark](https://github.com/overlookmotel/reactdom-server-bench), I am seeing the following performance improvements:\r\n\r\n* Node 11: ~4%\r\n* Node 10: ~4%\r\n* Node 8: ~4%\r\n* Node 6: ~15%\r\n\r\nIf there is an official benchmark I can use to test this on, please let me know."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/15171",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/15171/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/15171/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/15171/events",
    "html_url": "https://github.com/facebook/react/issues/15171",
    "id": 423460223,
    "node_id": "MDU6SXNzdWU0MjM0NjAyMjM=",
    "number": 15171,
    "title": "dangerouslySetInnerHTML is left empty on client render on top of bad server markup when rendering HTML",
    "user": {
      "login": "petetnt",
      "id": 7641760,
      "node_id": "MDQ6VXNlcjc2NDE3NjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/7641760?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petetnt",
      "html_url": "https://github.com/petetnt",
      "followers_url": "https://api.github.com/users/petetnt/followers",
      "following_url": "https://api.github.com/users/petetnt/following{/other_user}",
      "gists_url": "https://api.github.com/users/petetnt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petetnt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petetnt/subscriptions",
      "organizations_url": "https://api.github.com/users/petetnt/orgs",
      "repos_url": "https://api.github.com/users/petetnt/repos",
      "events_url": "https://api.github.com/users/petetnt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petetnt/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2019-03-20T20:35:18Z",
    "updated_at": "2019-03-21T18:21:55Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "This seems to be an edge case of https://github.com/facebook/react/issues/11789 fixed in https://github.com/facebook/react/pull/13353/files.\r\n\r\nI ran into this when trying to hydrate content rendered with https://github.com/prismicio/prismic-dom `asHtml` method.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug? I think. \r\n\r\n**What is the current behavior?**\r\n\r\nCurrent behavior:\r\n\r\n1. Server-side stuff comes in from server and contains the things we need\r\n2. Hydration mismatch happens\r\n3. dangerouslySetInnerHTML is called with correct value but an empty string gets rendered instead\r\n\r\nI tried to replicate the issue on https://codesandbox.io/s/2xojk10jln but failed.\r\n\r\nThe following testcase for `packages/react-dom/src/__tests__/ReactDOMServerIntegrationElements-test.js` produces the same result (I tried it first with the same PrismicDOM.RichText.asHtml(obj) call I have in the app) but I am not sure if it's correct:\r\n\r\n  ```js\r\n\r\n# test case\r\n    itRenders(\r\n      'a div with dangerouslySetInnerHTML set to html inserted',\r\n      async render => {\r\n        const obj = '<li>bar</li>';\r\n        const e = await render(\r\n          <div dangerouslySetInnerHTML={{__html: obj }} />,\r\n        );\r\n        expect(e.childNodes.length).toBe(1);\r\n        expect(e.firstChild.tagName).toBe('LI');\r\n        expect(e.firstChild.childNodes.length).toBe(1);\r\n      },\r\n    );\r\n```\r\n\r\n```bash\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with server string render (190ms)\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with server stream render (52ms)\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with clean client render (37ms)\r\n      ✓ renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of good server markup (74ms)\r\n      ✕ renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of bad server markup (34ms)\r\n\r\n  ● ReactDOMServerIntegration › ... › renders a div with dangerouslySetInnerHTML set to html return value of function called with client render on top of bad server markup\r\n\r\n    expect(received).toBe(expected) // Object.is equality\r\n\r\n    Expected: \"bar\"\r\n    Received: \"\"\r\n```\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nThe client render would have rendered `<li>bar</li>`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\ncommit c05b4b8  (latest master) and >16.8.\r\n\r\nSorry for a bit vague bug report.\r\n"
  }
]
